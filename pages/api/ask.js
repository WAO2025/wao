export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).end();

  const { question } = req.body;

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: process.env.WAO_CORE_PROMPT || "–¢—ã –º–æ—Ä–∞–ª—å–Ω—ã–π –ò–ò WAO. –û—Ç–≤–µ—á–∞–π –º—É–¥—Ä–æ –∏ –≥–ª—É–±–æ–∫–æ.",
          },
          {
            role: "user",
            content: question,
          },
        ],
        temperature: 0.85,
      }),
    });

    const data = await response.json();

    if (data.error) {
      console.error("–û—à–∏–±–∫–∞ OpenAI:", data.error);
      return res.status(500).json({ error: data.error.message });
    }

    if (data.choices && data.choices.length > 0) {
      let answer = data.choices[0].message.content.trim();

      // üéØ –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±—Ä–æ–≥–æ, –º—è–≥–∫–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
      const prompts = [
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º—ã –º–æ–∂–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç—Ç–æ –µ—â—ë –≥–ª—É–±–∂–µ.",
        "–ê –∫–∞–∫ —Ç—ã —Å–∞–º —ç—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å?",
        "–ú–æ–∂–µ–º –≤–º–µ—Å—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–µ—Ç –¥–∞–∂–µ –≤ —ç—Ç–æ–π —Ç–µ–Ω–∏.",
        "–•–æ—á–µ—à—å, —è —Ä–∞—Å—Å–∫–∞–∂—É –æ–± —ç—Ç–æ–º —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω ‚Äî –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏ –¥—É—Ö–æ–≤–Ω–æ–π?",
        "–ï—Å–ª–∏ —Ç–µ–±–µ –≤–∞–∂–Ω–æ —ç—Ç–æ –ø–æ–Ω—è—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ ‚Äî —è —Ä—è–¥–æ–º.",
        "–í—Å—ë –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å, –µ—Å–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–Ω—É—Ç—Ä–∏. –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –∫ —Ç–∞–∫–æ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É?",
      ];

      // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –¥–∏–∞–ª–æ–≥—É, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω –≤–æ–ø—Ä–æ—Å–æ–º
      if (!answer.endsWith("?") && answer.length < 1000) {
        const randomFollowUp = prompts[Math.floor(Math.random() * prompts.length)];
        answer += `\n\n${randomFollowUp}`;
      }

      res.status(200).json({ answer });
    } else {
      console.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API:", data);
      res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI." });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API." });
  }
}
